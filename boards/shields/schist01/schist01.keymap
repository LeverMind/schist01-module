/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <zephyr/dt-bindings/input/input-event-codes.h>

#include <behaviors.dtsi>
#include <behaviors/studio_unlock.dtsi>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors/mouse_key_press.dtsi>
#include <behaviors/mouse_key_toggle.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/input_transform.h>

#include <behaviors/insomnia.dtsi>
#include <dt-bindings/zmk/insomnia.h>
#include <input/processors.dtsi>

#define default_layer 0
#define layer1 1
#define layer2 2

#ifndef MOVE_Y
#define MOVE_Y(n) (0)
#endif
#ifndef MOVE_X
#define MOVE_X(n) (0)
#endif

#define U_MOUSE_MOVE_MAX 1700
#define MOU_U MOVE_Y(-U_MOUSE_MOVE_MAX)
#define MOU_D MOVE_Y(U_MOUSE_MOVE_MAX)
#define MOU_L MOVE_X(-U_MOUSE_MOVE_MAX)
#define MOU_R MOVE_X(U_MOUSE_MOVE_MAX)

#define U_MOUSE_SCROLL_MAX 10
#define SCL_U MOVE_Y(U_MOUSE_SCROLL_MAX)
#define SCL_D MOVE_Y(-U_MOUSE_SCROLL_MAX)
#define SCL_L MOVE_X(-U_MOUSE_SCROLL_MAX)
#define SCL_R MOVE_X(U_MOUSE_SCROLL_MAX)

/ {
        xy_transf: xy_transf {
                compatible = "zmk,input-processor-transform";
                #input-processor-cells = <1>;
                type = <INPUT_EV_REL>;
                x-codes = <INPUT_REL_X>, <INPUT_REL_WHEEL>;
                y-codes = <INPUT_REL_Y>, <INPUT_REL_HWHEEL>;
        };
        xy_scaler: xy_scaler {
                compatible = "zmk,input-processor-scaler";
                #input-processor-cells = <2>;
                type = <INPUT_EV_REL>;
                codes = <INPUT_REL_X>, <INPUT_REL_Y>;
                track-remainders;
        };
        x_scaler: x_scaler {
                compatible = "zmk,input-processor-scaler";
                #input-processor-cells = <2>;
                type = <INPUT_EV_REL>;
                codes = <INPUT_REL_X>;
        };
        to_wheel: to_wheel {
                compatible = "zmk,input-processor-code-mapper";
                #input-processor-cells = <0>;
                type = <INPUT_EV_REL>;
                map = <INPUT_REL_X INPUT_REL_HWHEEL>
                    , <INPUT_REL_Y INPUT_REL_WHEEL>;
        };


        tpad0_mmv_il {
                compatible = "zmk,input-listener";
                device = <&tpad0>;
                input-processors = <&xy_transf (INPUT_TRANSFORM_Y_INVERT)>;
                precise {
                        layers = <default_layer>;
                        inherit;
                        input-processors = <&xy_scaler 2 3>;
                };
                
        };
        


        behaviors {
                m_v: mouse_move {
                        compatible = "zmk,behavior-input-two-axis";
                        #binding-cells = <1>;
                        trigger-period-ms = <12>; // slow down for OTA, default is 3ms
                        x-input-code = <INPUT_REL_X>;
                        y-input-code = <INPUT_REL_Y>;
                        time-to-max-speed-ms = <300>;
                        acceleration-exponent = <1>;
                };
                m_s: mouse_scroll {
                        compatible = "zmk,behavior-input-two-axis";
                        #binding-cells = <1>;
                        trigger-period-ms = <12>; // slow down for OTA, default is 3ms
                        x-input-code = <INPUT_REL_HWHEEL>;
                        y-input-code = <INPUT_REL_WHEEL>;
                        time-to-max-speed-ms = <50>;
                        acceleration-exponent = <1>;
                };
                ec_s: mouse_scroll {
                        compatible = "zmk,behavior-input-two-axis";
                        #binding-cells = <1>;
                        trigger-period-ms = <12>; // slow down for OTA, default is 3ms
                        x-input-code = <INPUT_REL_HWHEEL>;
                        y-input-code = <INPUT_REL_WHEEL>;
                        time-to-max-speed-ms = <277>;
                        acceleration-exponent = <0>;
                };
                rot_enc: sensor_rotate {
                        compatible = "zmk,behavior-sensor-rotate";
                        #sensor-binding-cells = <0>;
                        bindings = <&ec_s MOVE_Y(-17)>, <&ec_s MOVE_Y(17)>;
                        tap-ms = <65>;
                };
        };

        mmv_input_listener {
                compatible = "zmk,input-listener";
                device = <&m_v>;
        };
        mms_input_listener {
                compatible = "zmk,input-listener";
                device = <&m_s>;
        };

keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp W              &kp B 
                &kp P     &kp F    &kp M      &kp U     &mo 1
                &kp R     &kp S    &kp N      &kp I     &mo 2    &kp TAB     &kp BACKSPACE
                &kp O     &kp A    &kp T      &kp E     &kp G    &mo 1       &kp SPACE    &kp LCTRL
                &kp C     &kp D    &kp L      &kp H     &kp Y    &kp LSHIFT  &kp RET      &kp LALT
            >;
        };
        layer1 {
            bindings = <
                &kp SEMI           &kp V 
                &kp SLASH &kp N7   &kp N8     &kp N9    &kp Z
                &kp SQT   &kp N4   &kp N5     &kp N6    &kp X    &kp C_PLAY_PAUSE    &mkp RCLK
                &kp MINUS &kp N1   &kp N2     &kp N3    &kp J    &trans      &mkp LCLK    &kp ESC
                &kp Q     &kp N0   &kp COMMA  &kp DOT   &kp K    &trans      &kp PSCRN    &mkp MCLK
            >;
        };
        layer2 {
            bindings = <
                &trans             &trans  
                &trans    &trans   &trans     &trans    &trans
                &trans    &trans   &trans     &trans    &trans   &trans     &bt BT_CLR
                &kp EQUAL &trans   &trans     &trans    &trans   &trans     &trans        &kp DEL
                &trans    &trans   &trans     &trans    &trans   &trans     &bt BT_NXT    &kp LGUI
            >;
        };
    };
};

